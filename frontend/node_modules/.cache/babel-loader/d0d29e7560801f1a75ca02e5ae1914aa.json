{"ast":null,"code":"import _slicedToArray from \"/Users/mariofayolle/Desktop/PROJECT_WEB_OCRES-master/frontend/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/mariofayolle/Desktop/PROJECT_WEB_OCRES-master/frontend/src/components/Chart/Chart.jsx\";\nimport React, { useState, useEffect } from \"react\";\nimport { fetchDailyData } from \"../../api\"; // chart.js\n\nimport { Line, Bar } from \"react-chartjs-2\"; // style\n\nimport styles from \"./Chart.module.css\"; // useState et useEffect sont des hooks (synonymes de fonctions)\n\nconst Chart = () => {\n  const _useState = useState([]),\n        _useState2 = _slicedToArray(_useState, 2),\n        dailyData = _useState2[0],\n        setDailyData = _useState2[1]; // On peut pas faire des fonctions asynchrones dans notre hook useEffect donc on va créer une fonction asynchrone à l'intérieur\n  // Donc on créer une fonction fetchAPI asynchrone  qui appel notre fonction fetchDailyData qui retourne une promesse\n  // car c'est une fonciton asynchrone et le await juste avant permet d'attendre puis on le met dans notre state setDailyData.\n\n\n  useEffect(() => {\n    const fetchAPI = async () => {\n      setDailyData((await fetchDailyData()));\n    };\n\n    fetchAPI(); // on appel la fonction pour l'activer\n  }, []); // 2 chart : barChart -> graphique pour chaque pays différents et lineChart -> le global quand on arrive sur le site\n\n  const lineChart = dailyData.length ? React.createElement(Line, {\n    data: {\n      labels: dailyData.map(({\n        date\n      }) => date),\n      datasets: [{\n        data: dailyData.map(({\n          confirmed\n        }) => confirmed),\n        label: \"Infected\",\n        borderCorlor: \"blue\",\n        fill: true\n      }, {\n        data: dailyData.map(({\n          deaths\n        }) => deaths),\n        label: \"Deaths\",\n        borderCorlor: \"red\",\n        backgroundColor: \"yellow\",\n        fill: true\n      }]\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29\n    },\n    __self: this\n  }) : null;\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51\n    },\n    __self: this\n  }, lineChart);\n};\n\nexport default Chart;","map":{"version":3,"sources":["/Users/mariofayolle/Desktop/PROJECT_WEB_OCRES-master/frontend/src/components/Chart/Chart.jsx"],"names":["React","useState","useEffect","fetchDailyData","Line","Bar","styles","Chart","dailyData","setDailyData","fetchAPI","lineChart","length","labels","map","date","datasets","data","confirmed","label","borderCorlor","fill","deaths","backgroundColor"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,SAASC,cAAT,QAA+B,WAA/B,C,CAEA;;AACA,SAASC,IAAT,EAAeC,GAAf,QAA0B,iBAA1B,C,CAEA;;AACA,OAAOC,MAAP,MAAmB,oBAAnB,C,CAEA;;AAEA,MAAMC,KAAK,GAAG,MAAM;AAAA,oBACgBN,QAAQ,CAAC,EAAD,CADxB;AAAA;AAAA,QACXO,SADW;AAAA,QACAC,YADA,kBAGlB;AACA;AACA;;;AACAP,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMQ,QAAQ,GAAG,YAAY;AAC3BD,MAAAA,YAAY,EAAC,MAAMN,cAAc,EAArB,EAAZ;AACD,KAFD;;AAIAO,IAAAA,QAAQ,GALM,CAKF;AACb,GANQ,EAMN,EANM,CAAT,CANkB,CAclB;;AAEA,QAAMC,SAAS,GAAGH,SAAS,CAACI,MAAV,GAChB,oBAAC,IAAD;AACE,IAAA,IAAI,EAAE;AACJC,MAAAA,MAAM,EAAEL,SAAS,CAACM,GAAV,CAAc,CAAC;AAAEC,QAAAA;AAAF,OAAD,KAAcA,IAA5B,CADJ;AAEJC,MAAAA,QAAQ,EAAE,CACR;AACEC,QAAAA,IAAI,EAAET,SAAS,CAACM,GAAV,CAAc,CAAC;AAAEI,UAAAA;AAAF,SAAD,KAAmBA,SAAjC,CADR;AAEEC,QAAAA,KAAK,EAAE,UAFT;AAGEC,QAAAA,YAAY,EAAE,MAHhB;AAIEC,QAAAA,IAAI,EAAE;AAJR,OADQ,EAOR;AACEJ,QAAAA,IAAI,EAAET,SAAS,CAACM,GAAV,CAAc,CAAC;AAAEQ,UAAAA;AAAF,SAAD,KAAgBA,MAA9B,CADR;AAEEH,QAAAA,KAAK,EAAE,QAFT;AAGEC,QAAAA,YAAY,EAAE,KAHhB;AAIEG,QAAAA,eAAe,EAAE,QAJnB;AAKEF,QAAAA,IAAI,EAAE;AALR,OAPQ;AAFN,KADR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADgB,GAqBd,IArBJ;AAuBA,SAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAMV,SAAN,CAAP;AACD,CAxCD;;AA0CA,eAAeJ,KAAf","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { fetchDailyData } from \"../../api\";\n\n// chart.js\nimport { Line, Bar } from \"react-chartjs-2\";\n\n// style\nimport styles from \"./Chart.module.css\";\n\n// useState et useEffect sont des hooks (synonymes de fonctions)\n\nconst Chart = () => {\n  const [dailyData, setDailyData] = useState([]);\n\n  // On peut pas faire des fonctions asynchrones dans notre hook useEffect donc on va créer une fonction asynchrone à l'intérieur\n  // Donc on créer une fonction fetchAPI asynchrone  qui appel notre fonction fetchDailyData qui retourne une promesse\n  // car c'est une fonciton asynchrone et le await juste avant permet d'attendre puis on le met dans notre state setDailyData.\n  useEffect(() => {\n    const fetchAPI = async () => {\n      setDailyData(await fetchDailyData());\n    };\n\n    fetchAPI(); // on appel la fonction pour l'activer\n  }, []);\n\n  // 2 chart : barChart -> graphique pour chaque pays différents et lineChart -> le global quand on arrive sur le site\n\n  const lineChart = dailyData.length ? (\n    <Line\n      data={{\n        labels: dailyData.map(({ date }) => date),\n        datasets: [\n          {\n            data: dailyData.map(({ confirmed }) => confirmed),\n            label: \"Infected\",\n            borderCorlor: \"blue\",\n            fill: true,\n          },\n          {\n            data: dailyData.map(({ deaths }) => deaths),\n            label: \"Deaths\",\n            borderCorlor: \"red\",\n            backgroundColor: \"yellow\",\n            fill: true,\n          },\n        ],\n      }}\n    ></Line>\n  ) : null;\n\n  return <div>{lineChart}</div>;\n};\n\nexport default Chart;\n"]},"metadata":{},"sourceType":"module"}