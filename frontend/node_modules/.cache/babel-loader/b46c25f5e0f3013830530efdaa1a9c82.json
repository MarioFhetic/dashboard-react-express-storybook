{"ast":null,"code":"import _slicedToArray from \"/Users/mariofayolle/Desktop/PROJECT_WEB_OCRES-master/frontend/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/mariofayolle/Desktop/PROJECT_WEB_OCRES-master/frontend/src/components/Chart/Chart.jsx\";\nimport React, { useState, useEffect } from \"react\";\nimport { fetchDailyData, fetchCharts } from \"../../api\"; // chart.js\n\nimport { Line, Bar } from \"react-chartjs-2\"; //material\n\nimport { Card, CardContent, Typography, Grid } from \"@material-ui/core\"; // style\n\nimport styles from \"./Chart.module.css\";\nimport cx from \"classnames\"; // useState et useEffect sont des hooks (synonymes de fonctions)\n// get data charts\n// const [charts, setCharts] = useState([]);\n// useEffect(() => {\n//   const fetchChartsLocal = async () => {\n//     setCharts(await fetchCharts());\n//   };\n//   fetchChartsLocal();\n// }, []);\n\nconst Chart = () => {\n  const _useState = useState([]),\n        _useState2 = _slicedToArray(_useState, 2),\n        dailyData = _useState2[0],\n        setDailyData = _useState2[1]; // On peut pas faire des fonctions asynchrones dans notre hook useEffect donc on va créer une fonction asynchrone à l'intérieur\n  // Donc on créer une fonction fetchAPI asynchrone  qui appel notre fonction fetchDailyData qui retourne une promesse\n  // car c'est une fonciton asynchrone et le await juste avant permet d'attendre puis on le met dans notre state setDailyData.\n\n\n  useEffect(() => {\n    const fetchAPI = async () => {\n      setDailyData((await fetchDailyData()));\n    };\n\n    fetchAPI(); // on appel la fonction pour l'activer\n  }, []); // 2 chart : barChart -> graphique pour chaque pays différents et lineChart -> le global quand on arrive sur le site\n\n  const lineChart = dailyData.length ? React.createElement(Line, {\n    data: {\n      labels: dailyData.map(({\n        date\n      }) => date),\n      datasets: [{\n        data: dailyData.map(({\n          confirmed\n        }) => confirmed),\n        label: \"Infected\",\n        borderCorlor: \"#3333ff\",\n        fill: true\n      }, {\n        data: dailyData.map(({\n          deaths\n        }) => deaths),\n        label: \"Deaths\",\n        borderCorlor: \"red\",\n        backgroundColor: \"yellow\",\n        fill: true\n      }]\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43\n    },\n    __self: this\n  }) : null;\n  const barChart = dailyData.length ? React.createElement(Bar, {\n    data: {\n      labels: [\"Red\", \"Yellow\", \"Pink\", \"Brown\", \"Green\"],\n      datasets: [{}]\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66\n    },\n    __self: this\n  }) : null;\n  return React.createElement(Grid, {\n    container: true,\n    justify: \"space-between\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75\n    },\n    __self: this\n  }, React.createElement(Grid, {\n    item: true,\n    classNames: cx(styles.card, styles.firstChart),\n    xs: 12,\n    md: 4,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76\n    },\n    __self: this\n  }, lineChart), React.createElement(Grid, {\n    item: true,\n    classNames: cx(styles.card, styles.secondChart),\n    xs: 12,\n    md: 4,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79\n    },\n    __self: this\n  }, barChart));\n};\n\nexport default Chart;","map":{"version":3,"sources":["/Users/mariofayolle/Desktop/PROJECT_WEB_OCRES-master/frontend/src/components/Chart/Chart.jsx"],"names":["React","useState","useEffect","fetchDailyData","fetchCharts","Line","Bar","Card","CardContent","Typography","Grid","styles","cx","Chart","dailyData","setDailyData","fetchAPI","lineChart","length","labels","map","date","datasets","data","confirmed","label","borderCorlor","fill","deaths","backgroundColor","barChart","card","firstChart","secondChart"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { fetchDailyData, fetchCharts } from \"../../api\";\n\n// chart.js\nimport { Line, Bar } from \"react-chartjs-2\";\n\n//material\nimport { Card, CardContent, Typography, Grid } from \"@material-ui/core\";\n\n// style\nimport styles from \"./Chart.module.css\";\nimport cx from \"classnames\";\n\n// useState et useEffect sont des hooks (synonymes de fonctions)\n\n// get data charts\n// const [charts, setCharts] = useState([]);\n\n// useEffect(() => {\n//   const fetchChartsLocal = async () => {\n//     setCharts(await fetchCharts());\n//   };\n//   fetchChartsLocal();\n// }, []);\n\nconst Chart = () => {\n  const [dailyData, setDailyData] = useState([]);\n\n  // On peut pas faire des fonctions asynchrones dans notre hook useEffect donc on va créer une fonction asynchrone à l'intérieur\n  // Donc on créer une fonction fetchAPI asynchrone  qui appel notre fonction fetchDailyData qui retourne une promesse\n  // car c'est une fonciton asynchrone et le await juste avant permet d'attendre puis on le met dans notre state setDailyData.\n  useEffect(() => {\n    const fetchAPI = async () => {\n      setDailyData(await fetchDailyData());\n    };\n\n    fetchAPI(); // on appel la fonction pour l'activer\n  }, []);\n\n  // 2 chart : barChart -> graphique pour chaque pays différents et lineChart -> le global quand on arrive sur le site\n\n  const lineChart = dailyData.length ? (\n    <Line\n      data={{\n        labels: dailyData.map(({ date }) => date),\n        datasets: [\n          {\n            data: dailyData.map(({ confirmed }) => confirmed),\n            label: \"Infected\",\n            borderCorlor: \"#3333ff\",\n            fill: true,\n          },\n          {\n            data: dailyData.map(({ deaths }) => deaths),\n            label: \"Deaths\",\n            borderCorlor: \"red\",\n            backgroundColor: \"yellow\",\n            fill: true,\n          },\n        ],\n      }}\n    ></Line>\n  ) : null;\n\n  const barChart = dailyData.length ? (\n    <Bar\n      data={{\n        labels: [\"Red\", \"Yellow\", \"Pink\", \"Brown\", \"Green\"],\n        datasets: [{}],\n      }}\n    ></Bar>\n  ) : null;\n\n  return (\n    <Grid container justify=\"space-between\">\n      <Grid item classNames={cx(styles.card, styles.firstChart)} xs={12} md={4}>\n        {lineChart}\n      </Grid>\n      <Grid\n        item\n        classNames={cx(styles.card, styles.secondChart)}\n        xs={12}\n        md={4}\n      >\n        {barChart}\n      </Grid>\n    </Grid>\n  );\n};\n\nexport default Chart;\n"]},"metadata":{},"sourceType":"module"}