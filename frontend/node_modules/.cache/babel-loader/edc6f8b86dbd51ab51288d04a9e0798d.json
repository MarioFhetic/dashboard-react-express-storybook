{"ast":null,"code":"import _slicedToArray from \"/Users/mariofayolle/Desktop/PROJECT_WEB_OCRES-master/frontend/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/mariofayolle/Desktop/PROJECT_WEB_OCRES-master/frontend/src/components/Chart/Chart.jsx\";\nimport React, { useState, useEffect } from \"react\";\nimport { fetchDailyData } from \"../../api\"; // chart.js\n\nimport { Line, Bar } from \"react-chartjs-2\"; // style\n\nimport styles from \"./Chart.module.css\"; // useState et useEffect sont des hooks (synonymes de fonctions)\n\nconst Chart = () => {\n  const _useState = useState(),\n        _useState2 = _slicedToArray(_useState, 2),\n        dailyData = _useState2[0],\n        setDailyData = _useState2[1]; // On peut pas faire des fonctions asynchrones dans notre hook useEffect donc on va créer une fonction asynchrone à l'intérieur\n  // Donc on créer une fonction fetchAPI asynchrone  qui appel notre fonction fetchDailyData qui retourne une promesse\n  // car c'est une fonciton asynchrone et le await juste avant permet d'attendre puis on le met dans notre state setDailyData.\n\n\n  useEffect(() => {\n    const fetchAPI = async () => {\n      setDailyData((await fetchDailyData()));\n    };\n\n    fetchAPI(); // on appel la fonction pour l'activer\n  });\n  {} // console.log(dailyData);\n  // 2 chart : barChart -> graphique pour chaque pays différents + lineChart -> le global\n\n  return React.createElement(\"h1\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32\n    },\n    __self: this\n  }, \"Chart\");\n};\n\nexport default Chart;","map":{"version":3,"sources":["/Users/mariofayolle/Desktop/PROJECT_WEB_OCRES-master/frontend/src/components/Chart/Chart.jsx"],"names":["React","useState","useEffect","fetchDailyData","Line","Bar","styles","Chart","dailyData","setDailyData","fetchAPI"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,SAASC,cAAT,QAA+B,WAA/B,C,CAEA;;AACA,SAASC,IAAT,EAAeC,GAAf,QAA0B,iBAA1B,C,CAEA;;AACA,OAAOC,MAAP,MAAmB,oBAAnB,C,CAEA;;AAEA,MAAMC,KAAK,GAAG,MAAM;AAAA,oBACgBN,QAAQ,EADxB;AAAA;AAAA,QACXO,SADW;AAAA,QACAC,YADA,kBAGlB;AACA;AACA;;;AACAP,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMQ,QAAQ,GAAG,YAAY;AAC3BD,MAAAA,YAAY,EAAC,MAAMN,cAAc,EAArB,EAAZ;AACD,KAFD;;AAIAO,IAAAA,QAAQ,GALM,CAKF;AACb,GANQ,CAAT;AAQA,GAEC,CAhBiB,CAehB;AAGF;;AAEA,SAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAAP;AACD,CArBD;;AAuBA,eAAeH,KAAf","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { fetchDailyData } from \"../../api\";\n\n// chart.js\nimport { Line, Bar } from \"react-chartjs-2\";\n\n// style\nimport styles from \"./Chart.module.css\";\n\n// useState et useEffect sont des hooks (synonymes de fonctions)\n\nconst Chart = () => {\n  const [dailyData, setDailyData] = useState();\n\n  // On peut pas faire des fonctions asynchrones dans notre hook useEffect donc on va créer une fonction asynchrone à l'intérieur\n  // Donc on créer une fonction fetchAPI asynchrone  qui appel notre fonction fetchDailyData qui retourne une promesse\n  // car c'est une fonciton asynchrone et le await juste avant permet d'attendre puis on le met dans notre state setDailyData.\n  useEffect(() => {\n    const fetchAPI = async () => {\n      setDailyData(await fetchDailyData());\n    };\n\n    fetchAPI(); // on appel la fonction pour l'activer\n  });\n\n  {\n    // console.log(dailyData);\n  }\n\n  // 2 chart : barChart -> graphique pour chaque pays différents + lineChart -> le global\n\n  return <h1>Chart</h1>;\n};\n\nexport default Chart;\n"]},"metadata":{},"sourceType":"module"}