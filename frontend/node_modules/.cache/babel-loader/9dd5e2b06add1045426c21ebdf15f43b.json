{"ast":null,"code":"import _slicedToArray from \"/Users/mariofayolle/Desktop/PROJECT_WEB_OCRES-master/frontend/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/mariofayolle/Desktop/PROJECT_WEB_OCRES-master/frontend/src/components/Chart/Chart.jsx\";\nimport React, { useState, useEffect } from \"react\";\nimport { fetchDailyData, fetchCharts } from \"../../api\"; // chart.js\n\nimport { Line, Bar, Doughnut, Radar } from \"react-chartjs-2\"; //material\n\nimport { Card, CardContent, Typography, Grid } from \"@material-ui/core\"; // style\n\nimport styles from \"./Chart.module.css\";\nimport cx from \"classnames\"; // useState et useEffect sont des hooks (synonymes de fonctions)\n// get data charts\n// const [charts, setCharts] = useState([]);\n// useEffect(() => {\n//   const fetchChartsLocal = async () => {\n//     setCharts(await fetchCharts());\n//   };\n//   fetchChartsLocal();\n// }, []);\n\nconst Chart = () => {\n  const _useState = useState([]),\n        _useState2 = _slicedToArray(_useState, 2),\n        dailyData = _useState2[0],\n        setDailyData = _useState2[1]; // On peut pas faire des fonctions asynchrones dans notre hook useEffect donc on va créer une fonction asynchrone à l'intérieur\n  // Donc on créer une fonction fetchAPI asynchrone  qui appel notre fonction fetchDailyData qui retourne une promesse\n  // car c'est une fonciton asynchrone et le await juste avant permet d'attendre puis on le met dans notre state setDailyData.\n\n\n  useEffect(() => {\n    const fetchAPI = async () => {\n      setDailyData((await fetchDailyData()));\n    };\n\n    fetchAPI(); // on appel la fonction pour l'activer\n  }, []); // 2 chart : barChart -> graphique pour chaque pays différents et lineChart -> le global quand on arrive sur le site\n\n  const lineChart = dailyData.length ? React.createElement(Line, {\n    data: {\n      labels: dailyData.map(({\n        date\n      }) => date),\n      datasets: [{\n        data: dailyData.map(({\n          confirmed\n        }) => confirmed),\n        label: \"Infected\",\n        borderCorlor: \"#3333ff\",\n        fill: true\n      }, {\n        data: dailyData.map(({\n          deaths\n        }) => deaths),\n        label: \"Deaths\",\n        borderCorlor: \"red\",\n        backgroundColor: \"yellow\",\n        fill: true\n      }]\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43\n    },\n    __self: this\n  }) : null;\n  const radarChart = dailyData.length ? React.createElement(Radar, {\n    data: {\n      labels: [\"Sport\", \"Révision\", \"Lecture\", \"Playstation\"],\n      datasets: [{\n        label: \"Activités en minutes par jour \",\n        data: [\"50\", \"10\", \"30\", \"60\"],\n        backgroundColor: [\"rgba(1, 113, 121, 0.2);\", \"rgba(54, 162, 235, 0.2)\", \"rgba(255, 206, 86, 0.2)\", \"rgba(75, 192, 192, 0.2)\"]\n      }]\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66\n    },\n    __self: this\n  }) : null;\n  const barChart = dailyData.length ? React.createElement(Bar, {\n    data: {\n      labels: [\"React.js\", \"Économie\", \"Philosophie\", \"Électronique\"],\n      datasets: [{\n        label: \"Notes sur 20\",\n        data: [\"12\", \"5\", \"20\", \"18\", \"2\"],\n        backgroundColor: [\"rgba(255, 99, 132, 0.2)\", \"rgba(54, 162, 235, 0.2)\", \"rgba(255, 206, 86, 0.2)\", \"rgba(75, 192, 192, 0.2)\"]\n      }]\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86\n    },\n    __self: this\n  }) : null;\n  const doughnutChart = dailyData.length ? React.createElement(Doughnut, {\n    data: {\n      labels: [\"Red\", \"Yellow\", \"Pink\", \"Brown\", \"Blue\"],\n      datasets: [{\n        label: \"Notes sur 20\",\n        data: [\"12\", \"5\", \"20\", \"18\", \"2\"],\n        backgroundColor: [\"rgba(255, 99, 132, 0.2)\", \"rgba(54, 162, 235, 0.2)\", \"rgba(255, 206, 86, 0.2)\", \"rgba(75, 192, 192, 0.2)\", \"rgba(128, 101, 245, 0.2)\"]\n      }]\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106\n    },\n    __self: this\n  }) : null;\n  return React.createElement(Grid, {\n    container: true,\n    justify: \"space-between\",\n    className: styles.container,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127\n    },\n    __self: this\n  }, React.createElement(Grid, {\n    style: {\n      padding: \"1% 0\"\n    },\n    component: Card,\n    item: true,\n    classNames: cx(styles.card, styles.firstChart),\n    xs: 12,\n    md: 4,\n    borderRadius: \"30px\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128\n    },\n    __self: this\n  }, radarChart), React.createElement(Grid, {\n    style: {\n      padding: \"1% 0\"\n    },\n    component: Card,\n    item: true,\n    classNames: cx(styles.card, styles.secondChart),\n    xs: 12,\n    md: 4,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 139\n    },\n    __self: this\n  }, barChart), React.createElement(Grid, {\n    style: {\n      padding: \"1% 0\"\n    },\n    component: Card,\n    item: true,\n    classNames: cx(styles.card, styles.thirdChart),\n    xs: 12,\n    md: 4,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 149\n    },\n    __self: this\n  }, doughnutChart));\n};\n\nexport default Chart;","map":{"version":3,"sources":["/Users/mariofayolle/Desktop/PROJECT_WEB_OCRES-master/frontend/src/components/Chart/Chart.jsx"],"names":["React","useState","useEffect","fetchDailyData","fetchCharts","Line","Bar","Doughnut","Radar","Card","CardContent","Typography","Grid","styles","cx","Chart","dailyData","setDailyData","fetchAPI","lineChart","length","labels","map","date","datasets","data","confirmed","label","borderCorlor","fill","deaths","backgroundColor","radarChart","barChart","doughnutChart","container","padding","card","firstChart","secondChart","thirdChart"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { fetchDailyData, fetchCharts } from \"../../api\";\n\n// chart.js\nimport { Line, Bar, Doughnut, Radar } from \"react-chartjs-2\";\n\n//material\nimport { Card, CardContent, Typography, Grid } from \"@material-ui/core\";\n\n// style\nimport styles from \"./Chart.module.css\";\nimport cx from \"classnames\";\n\n// useState et useEffect sont des hooks (synonymes de fonctions)\n\n// get data charts\n// const [charts, setCharts] = useState([]);\n\n// useEffect(() => {\n//   const fetchChartsLocal = async () => {\n//     setCharts(await fetchCharts());\n//   };\n//   fetchChartsLocal();\n// }, []);\n\nconst Chart = () => {\n  const [dailyData, setDailyData] = useState([]);\n\n  // On peut pas faire des fonctions asynchrones dans notre hook useEffect donc on va créer une fonction asynchrone à l'intérieur\n  // Donc on créer une fonction fetchAPI asynchrone  qui appel notre fonction fetchDailyData qui retourne une promesse\n  // car c'est une fonciton asynchrone et le await juste avant permet d'attendre puis on le met dans notre state setDailyData.\n  useEffect(() => {\n    const fetchAPI = async () => {\n      setDailyData(await fetchDailyData());\n    };\n\n    fetchAPI(); // on appel la fonction pour l'activer\n  }, []);\n\n  // 2 chart : barChart -> graphique pour chaque pays différents et lineChart -> le global quand on arrive sur le site\n\n  const lineChart = dailyData.length ? (\n    <Line\n      data={{\n        labels: dailyData.map(({ date }) => date),\n        datasets: [\n          {\n            data: dailyData.map(({ confirmed }) => confirmed),\n            label: \"Infected\",\n            borderCorlor: \"#3333ff\",\n            fill: true,\n          },\n          {\n            data: dailyData.map(({ deaths }) => deaths),\n            label: \"Deaths\",\n            borderCorlor: \"red\",\n            backgroundColor: \"yellow\",\n            fill: true,\n          },\n        ],\n      }}\n    ></Line>\n  ) : null;\n\n  const radarChart = dailyData.length ? (\n    <Radar\n      data={{\n        labels: [\"Sport\", \"Révision\", \"Lecture\", \"Playstation\"],\n        datasets: [\n          {\n            label: \"Activités en minutes par jour \",\n            data: [\"50\", \"10\", \"30\", \"60\"],\n            backgroundColor: [\n              \"rgba(1, 113, 121, 0.2);\",\n              \"rgba(54, 162, 235, 0.2)\",\n              \"rgba(255, 206, 86, 0.2)\",\n              \"rgba(75, 192, 192, 0.2)\",\n            ],\n          },\n        ],\n      }}\n    ></Radar>\n  ) : null;\n\n  const barChart = dailyData.length ? (\n    <Bar\n      data={{\n        labels: [\"React.js\", \"Économie\", \"Philosophie\", \"Électronique\"],\n        datasets: [\n          {\n            label: \"Notes sur 20\",\n            data: [\"12\", \"5\", \"20\", \"18\", \"2\"],\n            backgroundColor: [\n              \"rgba(255, 99, 132, 0.2)\",\n              \"rgba(54, 162, 235, 0.2)\",\n              \"rgba(255, 206, 86, 0.2)\",\n              \"rgba(75, 192, 192, 0.2)\",\n            ],\n          },\n        ],\n      }}\n    ></Bar>\n  ) : null;\n\n  const doughnutChart = dailyData.length ? (\n    <Doughnut\n      data={{\n        labels: [\"Red\", \"Yellow\", \"Pink\", \"Brown\", \"Blue\"],\n        datasets: [\n          {\n            label: \"Notes sur 20\",\n            data: [\"12\", \"5\", \"20\", \"18\", \"2\"],\n            backgroundColor: [\n              \"rgba(255, 99, 132, 0.2)\",\n              \"rgba(54, 162, 235, 0.2)\",\n              \"rgba(255, 206, 86, 0.2)\",\n              \"rgba(75, 192, 192, 0.2)\",\n              \"rgba(128, 101, 245, 0.2)\",\n            ],\n          },\n        ],\n      }}\n    ></Doughnut>\n  ) : null;\n\n  return (\n    <Grid container justify=\"space-between\" className={styles.container}>\n      <Grid\n        style={{ padding: \"1% 0\" }}\n        component={Card}\n        item\n        classNames={cx(styles.card, styles.firstChart)}\n        xs={12}\n        md={4}\n        borderRadius={\"30px\"}\n      >\n        {radarChart}\n      </Grid>\n      <Grid\n        style={{ padding: \"1% 0\" }}\n        component={Card}\n        item\n        classNames={cx(styles.card, styles.secondChart)}\n        xs={12}\n        md={4}\n      >\n        {barChart}\n      </Grid>\n      <Grid\n        style={{\n          padding: \"1% 0\",\n        }}\n        component={Card}\n        item\n        classNames={cx(styles.card, styles.thirdChart)}\n        xs={12}\n        md={4}\n      >\n        {doughnutChart}\n      </Grid>\n    </Grid>\n  );\n};\n\nexport default Chart;\n"]},"metadata":{},"sourceType":"module"}